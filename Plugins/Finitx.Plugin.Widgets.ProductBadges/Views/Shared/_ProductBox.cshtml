@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Services.Catalog
@using System.Text.RegularExpressions
@inject CatalogSettings catalogSettings
@inject IWorkContext workContext
@inject IProductService productService
@inject Nop.Services.Directory.ICurrencyService currncyService;
@inject Nop.Web.Factories.IProductModelFactory productModelFactory

@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
    var currentCurrency = await workContext.GetWorkingCurrencyAsync();

}
<style>

    /*.actual-price {
            font-size: 35px !important;
            font-weight: 900 !important;
            margin-right: 0px !important;
        }*/

    .prices {
        text-align: center;
    }

    .btns_buy {
        align-self: center;
        display: flex;
    }

        .btns_buy div {
            width: 90%;
        }

    /*.product-box-add-to-cart-button:hover {
            border: 1px solid #459f61;
            font-size: 2rem;
        }*/

    .details {
        padding-right: 0px !important;
    }

    /*  .product-box-add-to-cart-button {
            border-radius: 15px;
            width: 100%;
            background-color: #75bfa1 !important;
            height: 50px;
            font-size: 25px;
            font-weight: 900;
        }

        .product-box-add-to-cart-button_invisible {
            border-radius: 15px;
            width: 100%;
            background-color: #75bfa1 !important;
            height: 50px;
            font-size: 25px;
            font-weight: 900;
            visibility: hidden
        }*/

    /* .dollar_sign {
            font-size: 20px;
            font-style: normal;
            font-weight: 700;
            line-height: 28px;
            font-feature-settings: "tnum" on,"lnum" on;
            color: #75bfa1;
        }

        .period_price {
            font-feature-settings: "tnum" on,"lnum" on;
            display: flex;
            flex-direction: column;
            font-family: -apple-system,BlinkMacSystemFont,Trebuchet MS,Roboto,Ubuntu,sans-serif;
            font-size: 14px;
            font-style: normal;
            font-weight: 400;
            justify-content: flex-end;
            line-height: 18px;
            margin: 0 0 10px 7px;
            position: relative;
            color: #75bfa1;
            margin-bottom: 0px;
            letter-spacing: 1px;
        }
    */
    h2.product-title {
    }

    .inline {
        display: inline-block;
        vertical-align: bottom;
    }

    /* .new_description {
            color: gray;
            font-size: 13px;
            text-align: center;
            min-height: 30px;
        }*/
</style>
<div class="head-rect"></div>
<div class="product-item" style="height:75%" data-productid="@Model.Id">

    @*<div class="picture">
        <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
        <img alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
        </a>
        </div>*@
    <div class="details">
        <h2 class="product-title" style="font-size:40px !important">
            <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })">@Model.Name</a>
        </h2>
        @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
        {
            <div class="sku">
                @Model.Sku
            </div>
        }
        @if (Model.ReviewOverviewModel.AllowCustomerReviews)
        {
            var ratingPercent = 0;
            if (Model.ReviewOverviewModel.TotalReviews != 0)
            {
                ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
            }
            <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                <div class="rating">
                    <div style="width: @(ratingPercent)%">
                    </div>
                </div>
            </div>
        }


        <div class="add-info">
            <div class="new_description">
                @Html.Raw(Model.ShortDescription)
            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
            @{
                var lang = await workContext.GetWorkingLanguageAsync();
                var currency = await workContext.GetWorkingCurrencyAsync();
            }
            @{
                var showPrice = (await productService.GetProductByIdAsync(Model.Id)).StockQuantity > 0;
            }
            @if (showPrice)
            {
                <div class="prices">
                    @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                    {
                        <span class="price old-price">@Model.ProductPrice.OldPrice</span>
                    }
                    @{
                        var currencySymbol = "";
                        var symbolParts = Regex.Matches(Model.ProductPrice.Price, "\\D+").Select(x => x.Value).FirstOrDefault(x => x != "." && x != "," && x != "٫" && x != "٬");
                        currencySymbol = symbolParts;// currency.CurrencyCode;
                    }
                    <span class="dollar_sign"> @currencySymbol</span>

                    <span class="price ">
                        @if (currentCurrency.CurrencyCode == "IRR")
                        {
                            @($"{Model.ProductPrice.PriceValue:F0}")

                        }
                        else
                        {

                            @($"{Model.ProductPrice.PriceValue:F2}")
                        }

                    </span>
                    @{
                        var rentalPart = Model.FullDescription?.Replace("<p>", "")?.Replace("</p>", "")?.Split(' ').ToList();
                    }
                    @if (rentalPart?.Count > 1)
                    {
                        <div class=" row inline">
                            <span class="price text-secondary period_price row  ">@($"{rentalPart[0]}/")</span>
                            <span class="price text-secondary period_price row">@rentalPart[1]</span>
                        </div>

                    }


                    @if (Model.ProductPrice.DisplayTaxShippingInfo)
                    {
                        var inclTax = await workContext.GetTaxDisplayTypeAsync() == TaxDisplayType.IncludingTax;
                        //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                        //of course, you can modify appropriate locales to include VAT info there
                        <span class="tax-shipping-info">
                            @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = await Html.GetTopicSeNameAsync("shippinginfo") }))
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                    {
                        <div class="base-price-pangv">
                            @Model.ProductPrice.BasePricePAngV
                        </div>
                    }
                </div>
            }
            @if (!showPrice)
            {
                <div class="prices" style="visibility:hidden">
                    @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                    {
                        List<string> oldPriceParts = Model.ProductPrice.Price.Replace("$", "").Split(' ').ToList();


                        <span class="dollar_sign">&#36;</span>

                        <span class="price old-price">@oldPriceParts[0]</span>
                        if (oldPriceParts.Count > 1)
                        {
                            <span class="price period_price">@oldPriceParts[2] </span>
                            <span class="price period_price">@($"/{oldPriceParts[3]}")</span>
                        }

                    }
                    @{
                        List<string> priceParts = Model.ProductPrice.Price.Split(' ').ToList();
                    }

                    <span class="dollar_sign">
                        @priceParts[0]
                    </span>

                    <span class="price">
                        @priceParts[1]

                    </span>
                    @if (priceParts.Count > 1)
                    {
                        <div class=" row inline">
                            <span class="price text-secondary period_price row  ">@($"{priceParts[2]}/")</span>
                            <span class="price text-secondary period_price row">@priceParts[3]</span>
                        </div>

                    }


                    @if (Model.ProductPrice.DisplayTaxShippingInfo)
                    {
                        var inclTax = await workContext.GetTaxDisplayTypeAsync() == TaxDisplayType.IncludingTax;
                        //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                        //of course, you can modify appropriate locales to include VAT info there
                        <span class="tax-shipping-info">
                            @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = await Html.GetTopicSeNameAsync("shippinginfo") }))
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                    {
                        <div class="base-price-pangv">
                            @Model.ProductPrice.BasePricePAngV
                        </div>
                    }
                </div>
            }

            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })


            @{
                var dataDictAttributes = new ViewDataDictionary(ViewData);
                dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                var product = await productService.GetProductByIdAsync(Model.Id);
                var productModel = await productModelFactory.PrepareProductDetailsModelAsync(product);
                @await Html.PartialAsync("_ProductAttributes", productModel, dataDictAttributes)
            }
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
            <div class="btns_buy">
                @*<button type="button" class="button-1 product-box-detail-button" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')">@T("Products.Details")</button>*@
                @if (!Model.ProductPrice.DisableBuyButton)
                {
                    var addToCartText = T("ShoppingCart.AddToCart").Text;
                    if (Model.ProductPrice.IsRental)
                    {
                        addToCartText = T("ShoppingCart.Rent").Text;
                    }
                    if (Model.ProductPrice.AvailableForPreOrder)
                    {
                        addToCartText = T("ShoppingCart.PreOrder").Text;
                    }
                    <button type="button" class="button-2 product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;">@(addToCartText)</button>
                }
                @if (Model.ProductPrice.DisableBuyButton)
                {
                    var addToCartText = T("ShoppingCart.AddToCart").Text;
                    if (Model.ProductPrice.IsRental)
                    {
                        addToCartText = T("ShoppingCart.Rent").Text;
                    }
                    if (Model.ProductPrice.AvailableForPreOrder)
                    {
                        addToCartText = T("ShoppingCart.PreOrder").Text;
                    }
                    <button style="visibility:hidden !important" type="button " class="button-2 product-box-add-to-cart-button_invisible">@(addToCartText)</button>
                }
                @if (!Model.ProductPrice.DisableAddToCompareListButton)
                {
                    <button type="button" class="button-2 add-to-compare-list-button" title="@T("ShoppingCart.AddToCompareList")" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;">@T("ShoppingCart.AddToCompareList")</button>
                }
                @if (!Model.ProductPrice.DisableWishlistButton)
                {
                    <button type="button" class="button-2 add-to-wishlist-button" title="@T("ShoppingCart.AddToWishlist")" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;">@T("ShoppingCart.AddToWishlist")</button>
                }
            </div>
        </div>
    </div>
</div>
