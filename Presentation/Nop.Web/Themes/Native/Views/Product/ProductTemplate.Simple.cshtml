@model ProductDetailsModel
@using Microsoft.AspNetCore.Http.Extensions
@using Nop.Core
@using Nop.Services.Configuration
@using Nop.Core.Domain.Seo;
@using Nop.Core.Domain.Catalog
@inject SeoSettings seoSettings
@inject Nop.Core.IWebHelper webHelper
@inject IStoreContext storeContext
@inject ISettingService settingService
@inject CatalogSettings catalogSettings

@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, webHelper.GetCurrentRequestProtocol()).ToLowerInvariant();
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    var showShareButton = catalogSettings.ShowShareButton;
    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }

    var areTabsOneColumn = await settingService.GetSettingByKeyAsync("nativethemesettings.isquicktabsonecolumn", false, (await storeContext.GetCurrentStoreAsync()).Id, true);
    var tabsClass = areTabsOneColumn ? "tabs-one-column" : "tabs-two-columns";
}
@section BreadcrumbTop
    {
    <!--product breadcrumb-->
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
}
<div class="page product-details-page">
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
			@if (seoSettings.MicrodataEnabled)
            {
                @await Html.PartialAsync("_Microdata", Model)
            }
            <div data-productid="@Model.Id" class="@tabsClass product-page-content">
                <div class="product-page-top-wrapper">
                    <div class="product-page-body">
                        <div class="product-essential">
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialTop, additionalData = Model })

                            @{
                                var cloudZoom = await Component.InvokeAsync("Widget", new { widgetZone = "sevenspikes_cloud_zoom", additionalData = Model });
                            }
                            @if (!String.IsNullOrEmpty(await cloudZoom.RenderHtmlContentAsync()))
                            {
                                @cloudZoom
                            }
                            else
                            {
                                @await Html.PartialAsync("_ProductDetailsPictures", Model)
                            }

                            <div class="overview">
                                @await Html.PartialAsync("_Discontinued", Model)
                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })

                                <div class="product-name">
                                    <h1>
                                        @Model.Name
                                    </h1>
                                </div>

                                <!--product reviews-->
                                @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)

                                <!--product SKU, manufacturer part number, stock info-->
                                @await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model)
                                <!--product manufacturers-->
                                @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)

                                @if (!string.IsNullOrEmpty(Model.ShortDescription))
                                {
                                    <div class="short-description">
                                        @Html.Raw(Model.ShortDescription)
                                    </div>
                                }

                                <!--price-->
                                @{
                                    var dataDictPrice = new ViewDataDictionary(ViewData);
                                    dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                                    @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)
                                }

                                <!--free shipping-->
                                @if (Model.FreeShippingNotificationEnabled && Model.IsFreeShipping)
                                {
                                    <div class="free-shipping">@T("Products.FreeShipping")</div>
                                }

                                <div class="buttons">
                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })
                                    @{
                                        var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                        dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                        @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                                    }

                                    @await Html.PartialAsync("_CompareProductsButton", Model)
                                    @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                                    <!--sample download-->
                                    @await Html.PartialAsync("_DownloadSample", Model)
                                    <!--Back in stock subscription-->
                                    @await Html.PartialAsync("_BackInStockSubscription", Model)
                                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                                </div>

                                <!--attributes-->
                                @{
                                    var dataDictAttributes = new ViewDataDictionary(ViewData);
                                    dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                                    @await Html.PartialAsync("_ProductAttributes", Model, dataDictAttributes)
                                }

                                <!--rental products-->
                                @{
                                    var dataDictRental = new ViewDataDictionary(ViewData);
                                    dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{Model.Id}";
                                    @await Html.PartialAsync("_RentalInfo", Model, dataDictRental)
                                }

                                <!--gift card-->
                                @{
                                    var dataDictGiftCard = new ViewDataDictionary(ViewData);
                                    dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
                                    @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                                }

                                <!--estimate shipping-->
                                @await Html.PartialAsync("_ProductEstimateShipping", Model.ProductEstimateShipping)

                                <!--add to cart-->
                                @{
                                    var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                    dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                                    @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                                }

                                @if (showShareButton)
                                {
                                    @await Html.PartialAsync("_ShareButton", Model)
                                }
                                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                            </div>
                            @if (!string.IsNullOrEmpty(Model.FullDescription))
                            {
                                <div class="full-description">
                                    @Html.Raw(Model.FullDescription)
                                </div>
                            }
                            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialBottom, additionalData = Model })
                        </div>
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })
                        <div class="product-collateral">
                            @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)
                            @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecificationModel)
                            @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                        </div>
                    </div>
                    @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
                </div>
            </div>
            @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
        </form>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
    </div>
</div>
